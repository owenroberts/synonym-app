extends layout
block content
	div.error
		div.msg
			div.sorry= "We couldn't find a path."
			div.errormsg
			div.ok
				div="OK"
	div#hamburger
		ul
			li
				a(href="/")="New Search"
			li
				a(href="#")="About SynoPath"

	div#newpath
		ul
			li
				img(src="/images/loader.svg" width="60px" style="margin:1em;")

	div#main
		header
			div.menu
				svg(width="22" height="22" viewBox="0 0 20 20" class="stroke")
					path(fill="none" stroke="#C7C8CA" stroke-width="2" stroke-linecap="round" d="M17.2 7.6H1.1M17.2 1.2H1.1M17.2 14H1.1")
			div.plus.fadein
				svg(width="20" height="20" viewBox="0 0 20 20" class="stroke")
					g(fill="none")
					path(d="M9.6 1v17.1M18.1 9.6H1" stroke="#C7C8CA" stroke-width="2" stroke-linecap="round")
											
		if data.length > 1
			div.path-dots.slidedown.pathdotcontainer
				div.leftarrow= "<"
				div.rightarrow=  ">"
				div.dots
					for result, index in data
						a.path-dot(id="p-"+index)
						
			
		div#paths
			- var pathIndex = 0
			for result, index in data
				- pathIndex = index		
				div.path(id="path-"+index)
					div.nodes
						div.node-dad=result.start
						each node, index in result.path
							div.node-dad
								div.inner-nodes
									if node.alternates
										for alt in node.alternates
											if alt == node.node
												div.node.thenode=alt
											else
												div.node.alternate=alt

						div.node-dad=result.end
							span.toggle
								

									
	// javascript // 
	script(type='text/javascript').

		$(document).ready( function() {


		$('a').on('click', function(ev) {
			ev.preventDefault();
			window.location = this.href;
		});


		function reportError(errmsg) {
			$('.error').fadeIn();
			$('.errormsg').html(errmsg);
			$('.ok').on('click', function() {
				$('.error').fadeOut();
			});
		}
		if ("#{errmsg}") reportError("#{errmsg}");



		// ** blogal variables ** //
		var debug = false;
		var fadeDur = debug ? 10 : 500;

		var w = window.innerWidth;
		var pathNum = #{pathIndex};
		var currentPathNum = pathNum;
		var pathData = !{JSON.stringify(data)};
		var noTouching = false;


		// ** animate nodes (or not) ** //
		if (pathNum < 1) {
			$('.path:first-child .nodes').each( function() {
				var nodes = $('.node-dad');
				for (var i = 0; i < nodes.length; i++) {
					var showNode = function(num) {
						setTimeout( function() {
							$(nodes[num]).fadeIn(fadeDur);
						}, num*fadeDur);
					}(i);
				}
			});
			$('.path:gt(1) .node-dad').css({display:'block'});
		} else {
			$('.arrow').css({display:'none'});
			$('.node-dad').css({display:'block'});
			$('.plus').css({transform:"rotate(45deg)"});
			setTimeout(function() {
				$('.plus').css({transform:"rotate(90deg)"});
			}, fadeDur);
			$('.path-dot:nth-child('+(currentPathNum+1)+')').css({color:'black'});
			$('.path-dots').slideDown(fadeDur, function() {
				$('#paths').animate({
					left: -currentPathNum * w
				}, fadeDur);
			});	
		}

		// ** move nodes to "thenode" //

		$('.inner-nodes').each( function() {
			var i = $(this).find('.thenode').index();
			$(this).animate({
				left: -300 * i
			}, fadeDur);
		});

		// ** fade in ui ** //
		$('.fadein').animate({
			opacity: 1
		}, fadeDur*2);
		


		// ** position paths ** //
		var paths = $('.path');
		for (var i = 0; i < paths.length; i++) {
			$(paths[i]).css({left:i*w});
		}

		// ** animate path switching  ** //
		$('.path-dot').on('click', function() {
			$('.path-dot').css({color:'lightgray'});
			currentPathNum = $(this).index();
			$('.path-dot:nth-child('+(currentPathNum+1)+')').css({color:'black'});
			var index = $(this).index();
			$('#paths').animate({
				left: -w * index
			}, fadeDur);
		});

		var nextPath = function() {
			if (currentPathNum < pathNum) {
				currentPathNum++;
				$('.path-dot').css({color:'lightgray'});
				$('.path-dot:nth-child('+(currentPathNum+1)+')').css({color:'black'});
				$('#paths').animate({
					left: -currentPathNum * w
				}, fadeDur);
			}
		};

		$( ".path-dots" ).on( "swipeleft", nextPath);
		$('.rightarrow').on('click', nextPath);

		var prevPath = function() {
			console.log("prevPath");
			if (currentPathNum > 0) {
				currentPathNum--;
				$('.path-dot').css({color:'lightgray'});
				$('.path-dot:nth-child('+(currentPathNum+1)+')').css({color:'black'});
				var offset = $('#paths').css('left');
				offset = offset.replace('px', '');
				$('#paths').animate({
					left: +offset + w
				}, fadeDur);
			}
		};

		$( ".path-dots" ).on( "swiperight", prevPath);
		$('.leftarrow').on('click', prevPath);

		function getRandomInt(min, max) {
			return Math.floor(Math.random()* ( max - min + 1) + min);
		}

		var nodeLimitArray = [];
		for (var i = 0; i < +pathData.length; i++) {
			nodeLimitArray.push(+pathData[i].nodelimit);
		}

		// ** plus button for new paths ** //
		function getNewPath(ev) {

			ev.stopPropagation();
			$('#newpath').fadeIn(fadeDur);

			var nodelimit;
			if (nodeLimitArray.length < 15) {

				do {
					nodelimit = getRandomInt(2,20);
				} while (nodeLimitArray.indexOf(nodelimit) != -1);

				var synonymlevel = 10;  // should synonym level be randomized?

				var form = $('<form>')
					.attr({
						"method":"get",
						"action":"/search",
						"id":"newpath"
					});
				var startElement = $("<input>")
					.attr({
						"name":"start",
						"value": pathData[currentPathNum].start
					});
				form.append(startElement);
				var endElement = $("<input>")
					.attr({
						"name":"end",
						"value": pathData[currentPathNum].end
					});
				form.append(endElement);
				var nodeElement = $("<input>")
					.attr({
						"name":"nodelimit",
						"value": nodelimit
					});
				form.append(nodeElement);
				var synElement = $("<input>")
					.attr({
						"name":"synonymlevel",
						"value": synonymlevel
					});
				form.append(synElement);
				for (var i = 0; i < pathData.length; i++){
					var pathElement = $("<input>")
						.attr({
							"name":"oldpath",
							"value": pathData[i].cname
						});
					form.append(pathElement);
				}
				setTimeout(function() {
					form.submit();
				}, 500);

			} else {
				$('#newpath').fadeOut(fadeDur/2);
				reportError('You have reached the maximum number of paths.');
			}
			
						
		}
		$('.plus').on('click',  getNewPath);
		

		// ** hamburger menu ** //
		$('.menu').on('click', function() {
			$('#hamburger').fadeIn(fadeDur);
		});
		$('#hamburger').on('click', function() {
			$(this).fadeOut();
		});

		// ** inner nodes ** //
		var nodedads = $('.node-dad');
		for (var i = 1; i < nodedads.length - 1; i++) {
			var inner = $(this).find('.inner-nodes');
			var innerwidth = 0;
			var nodes = $(inner).find('.node');
			for (var h = 0; h < nodes.length; h++) {
				innerwidth += $(nodes[i]).width();
			}
			$(inner).css({width:innerwidth});
			$(nodedads[i]).css({width:innerwidth + 48});
		}


		// ** swipe left on nodes ** //
		//-  taking about "modified" bool here, not sure what it should do
		$( 'body' ).on( "swipeleft", ".node", function() {
			if (!noTouching) animateNodes(this, 1, "-=300");	
		});
		$( 'body' ).on( "swiperight", ".node", function() {
			if (!noTouching) animateNodes(this, 0, "+=300");	
		});

		function animateNodes(elem, dir, animProp) {
			noTouching = true;

			var parent = $(elem).parent();
			var grandparent = $(parent).parent();

			var ldrimg = $('<img>');
			$(ldrimg).attr("src", "/images/loader.svg")
				.addClass('ldrimg')
				.css({width:"24px", position:"absolute", left:"260px", marginTop:"12px"});
			$(grandparent).prepend(ldrimg);
			
			var alt = dir ? $(elem).next() : $(elem).prev();
			if (alt[0]) {
				$(elem).animate({ opacity: 0 }, fadeDur);
				$(alt).animate({  opacity: 1 }, fadeDur);
				$(parent).animate({ left: animProp }, fadeDur);
				modifyChain($(grandparent), $(alt)[0].innerText);
			} else {
				$(elem).addClass('animated shake');
				setTimeout(function() {
					$(elem).removeClass('animated-half shake');
				}, fadeDur);
				noTouching = false;
				$('.ldrimg').remove();
			}	
		}	
		
		// ** modify chain ** //
		function modifyChain(elem, alt) {
			$(elem).find('.dots').html('<img src="/images/loader.svg" />');
			
			var pathIndex = $(elem).index();
			var pathParent = $(elem).parent().parent().attr('id');
			var nodes = $('#' + pathParent + ' .node-dad:gt('+elem.index()+')');

			$(nodes).animate({
				opacity: 0.3
			}, fadeDur/2);

			var allsynonyms = [pathData[currentPathNum].start];

			for (var i = 0; i < pathIndex; i++) {
				allsynonyms = allsynonyms.concat(pathData[currentPathNum].path[i].alternates);
			}

			$.ajax({
				url: '/search/modified',
				type: 'get',
				dataType:'json',
				data: {
					start: alt,
					end: pathData[currentPathNum].end,
					synonymlevel: 10,
					nodelimit: 10 - elem.index(),
					allsynonyms: allsynonyms
				},
				success: function(data) {
					

					
					if (data.errormsg) {
						var err = '"' + alt + '" is related to "' + pathData[currentPathNum].start + '," but we couldn\'t find a path that connects it to "' + pathData[currentPathNum].end + '." <br><br> You can either swipe back to the previous word or try another one.';
						reportError(err);
						$(nodes).animate({
							opacity: 1
						}, fadeDur/2, function() {
							modified = false;
						});
						$(elem).find('.dots').html('â€¢');
						noTouching = false;
						$('.ldrimg').remove();

					} else {
						$(nodes).animate({
							opacity: 1
						}, fadeDur/2);

						var waitTime = nodes.length * fadeDur/2;
						setTimeout(function() {
								noTouching = false;
						}, waitTime + fadeDur);

						for (var i = 0; i < nodes.length - 1; i++) {
							var n = i;
							$(nodes[i]).fadeOut((nodes.length - i) * fadeDur/2, function(n) {
								this.remove();
							});
						}

						for (var i = 0; i < data.path.length; i ++) {
							var newnodedad = $('<div>')
								.addClass('node-dad');
							
							var inners = $('<div>')
								.addClass('inner-nodes');

							var newnode = $('<div>')
								.addClass('node')
								.text(data.path[i].node);

							inners.append(newnode);
							for (var h = 0; h < data.path[i].alternates.length; h++) {
								if (data.path[i].alternates[h] != data.path[i].node) {
									var newsynnode = $('<div>')
										.addClass('node')
										.addClass('alternate')
										.text(data.path[i].alternates[h]);
										inners.append(newsynnode);
								}
							}
							
							newnodedad.append(inners);
							newnodedad.insertBefore('#' + pathParent + ' .node-dad:last-child()');
							newnodedad.delay(i * fadeDur/2 + waitTime + fadeDur/2).fadeIn(fadeDur);
							setTimeout(function() {
								$('.ldrimg').remove();
							}, waitTime);
						}
					}
					
				}
			});
		}
		});