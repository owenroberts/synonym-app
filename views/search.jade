extends layout
block content

	div#sidebar
		ul
			li
				a(href="/")="new search"
			li
				a(href="#")="about synopath"
			li
				a(href="#")="how it works"
			li
				a(href="#")="feedback"
	div#main
		header
			a.menu
				svg(width="22" height="22" viewBox="0 0 20 20" class="stroke")
					path(fill="none" stroke="#C7C8CA" stroke-width="2" stroke-linecap="round" d="M17.2 7.6H1.1M17.2 1.2H1.1M17.2 14H1.1")
			div.path-dots.fadein
				- var pathIndex = 0
				for result, index in data
					a.path-dot(id="p-"+index)
					- pathIndex = index
			a.plus.fadein
				form(id="makeNewPath", method="get", action="/search")
					input(type="hidden",name="start",value=data[0].start)
					input(type="hidden",name="end", value=data[0].end)
					for result, index in data
						input(type="hidden", name="oldpath", value=result.cname)

				svg(width="20" height="20" viewBox="0 0 20 20" class="stroke")
					g(fill="none")
					path(d="M9.6 1v17.1M18.1 9.6H1" stroke="#C7C8CA" stroke-width="2" stroke-linecap="round")
		div#paths
			for result, index in data
				div.path(id="path-"+index)
					div.adjust
						div="path adjustments"
						hr
						form(method="get", action="/search")
							input(type="hidden",name="start",value=result.start)
							input(type="hidden",name="end", value=result.end)
							label(style="color:black")="path length: "
								span="select how many words to use in a path."
							input(type="range",min=1,max=15,value=result.nodelimit,id="nodelimit",name="nodelimit")
							div.numbers.nodelim
								- var n = 1
								while n < 16
									span.num= n++

							hr
							label(style="color:black")="path depth: "
								span="select the maximum number of synonyms to search for each word in a path."
							input(type="range",min=1,max=15,value=result.synonymlevel,id="synonymlevel",name="synonymlevel")
							div.numbers.synlev
								- var n = 1
								while n < 16
									span.num= n++

							hr
							input(type="submit", value="apply adjustment")
					div.nodes
						each node, index in result.path
							div.node-dad
								if index == 0
									a.toggle.adjust-button
										svg(class="fill" width="20" height="20" viewBox="0 0 15.2 14.6")
											path(fill="#C7C8CA" d="M12.2 1.4l1.5 1.4s-1 1.5-.5 2.3c.4.8 1.9 1.1 1.9 1.1v2s-1.5.2-1.9 1.2c-.4 1 .5 2.3.5 2.3l-1.4 1.4s-1.2-.9-2.3-.5c-1.1.4-1.3 1.9-1.3 1.9H6.6s-.1-1.4-1.1-1.9-2.6.5-2.6.5l-1.4-1.4s1-1.3.5-2.3c-.4-.9-2-1.1-2-1.1v-2s2.1-.5 2.1-1.4-.6-2.1-.6-2.1L3 1.4s1.3.8 2.4.5C6.2 1.6 6.6 0 6.6 0h2.1S9 1.6 10 2c1 .3 2.2-.6 2.2-.6m-4.6 9.8c2.2 0 4-1.7 4-3.9 0-2.1-1.8-3.9-4-3.9s-4 1.7-4 3.9c-.1 2.1 1.7 3.9 4 3.9")
								else if index < result.path.length - 1
									span.toggle
										a.dots=" •  •"
								else 
									a.toggle

								div.inner-nodes
									div.node=node.node
									if index != 0
										if result.path[index - 1].synonyms
											- var s = 0
											- var c = 0
											while s < 1
												- c++
												if result.path[index - 1].synonyms[c] != result.path[index].node
													- s++
													div.synonym=result.path[index - 1].synonyms[c]
								

									
	// javascript // 
	script(type='text/javascript').

		$(document).ready( function() {

			
		
		// ** mobile scrolling stuff ** //
		//document.ontouchmove = function(e) {e.preventDefault()};
		//- $('.nodes').on('touchmove', function(event){
		//- 	event.stopPropagation();
		//- });

		//- $('.adjust').on('touchmove', function(event){
		//- 	event.stopPropagation();
		//- });

		// ** blogal variables ** //
		var w = window.innerWidth;
		var pathNum = #{pathIndex};
		var currentPathNum = pathNum;

		// ** animate nodes (or not) ** //
		if (pathNum < 1) {
			$('.path:first-child .nodes').animate({
			"padding-left":"16px"
			}, 900, function() {
				$('.toggle').animate({width:"24px"}, 900, function() {
					var nodes = $('.node-dad');
					for (var i = 0; i < nodes.length; i++) {
						var showNode = function(num) {
							setTimeout( function() {
								$(nodes[num]).fadeIn();
							}, num*400);
						}(i);
					}
				});
			});
			$('.path:gt(1) .nodes').css({
				'padding-left':'16px'
			});
			$('.path:gt(1) .toggle').css({width:'24px'});
			$('.path:gt(1) .node-dad').css({display:'block'});
		} else {
			$('.nodes').css({'padding-left':'16px'});
			$('.toggle').css({width:'24px'});
			$('.node-dad').css({display:'block'});
			$('.plus').css({transform:"rotate(45deg)"});
			setTimeout(function() {
				$('.plus').css({transform:"rotate(90deg)"});
			}, 500);
			$('.path-dot:nth-child('+(currentPathNum+1)+')').css({color:'black'});
			$('#paths').animate({
					left: -currentPathNum * w
			}, 500);
		}

		// ** fade in ui ** //
		$('.fadein').animate({
			opacity: 1
		}, 900);


		// ** position paths ** //
		var paths = $('.path');
		for (var i = 0; i < paths.length; i++) {
			$(paths[i]).css({left:i*w});
		}

		// ** animate path switching  ** //
		$('.path-dot').on('click', function() {
			$('.path-dot').css({color:'lightgray'});
			currentPathNum = $(this).index();
			$('.path-dot:nth-child('+(currentPathNum+1)+')').css({color:'black'});
			var index = $(this).index();
			$('#paths').animate({
				left: -w * index
			}, 500);
		});

		$( "#main" ).on( "swipeleft", function() {
			if (currentPathNum < pathNum) {
				currentPathNum++;
				$('.path-dot').css({color:'lightgray'});
				$('.path-dot:nth-child('+(currentPathNum+1)+')').css({color:'black'});
				$('#paths').animate({
					left: -currentPathNum * w
				}, 500);
			}
		});

		$( "#main" ).on( "swiperight", function() {
			if (currentPathNum > 0) {
				currentPathNum--;
				$('.path-dot').css({color:'lightgray'});
				$('.path-dot:nth-child('+(currentPathNum+1)+')').css({color:'black'});
				var offset = $('#paths').css('left');
				offset = offset.replace('px', '');
				$('#paths').animate({
					left: +offset + w
				}, 500);
			}
		});

		// ** plus button for new paths ** //
		function getNewPath() {
			$(this).css({transform:"rotate(45deg)"});
			$('#makeNewPath').submit();
		}
		$('.plus').on('click', getNewPath);


		// ** set up adjust menu(s) and clicking ** //
		var adjust = false;
		var adjustOffset = 260;
		function adjustMenu() {
			if (!adjust) {
				$('.nodes').animate({
					'left': adjustOffset
				}, 500);
				adjust = true;
			} else {
				$('.nodes').animate({
					'left': 0
				}, 500);
				adjust = false;
			}
		}
		$('.adjust-button').on('click', adjustMenu);



		
		// ** adjust menu animations ** //
		$('input[type="range"]').on('change', function() {
			$('#adjust input[type="submit"]').css({
				'color':'#6a75ff'
			});
			var e = $(this);
			e.next().children().css({color:"#c6c8ca"})
			e.next().children(':nth-child('+e[0].value+')').css({color:"black"});
		});
		//$('.nodelim').children(':nth-child('+#{nodelimit}+')').css({color:"black"});
		//$('.synlev').children(':nth-child('+#{synonymlevel}+')').css({color:"black"});

		$('input[value="Enter"]').on('click', function(e) {
			$('.adjust').slideUp();
			for (var i = 1; i < nodes.length - 1; i++) 
				$(nodes[i]).fadeOut();
			var ldr = $('<img>').attr({'class':'ldr', 'src':'/images/ldr.gif'});
			$(nodes[0]).after(ldr);
		});

		// ** sidebar menu ** //
		var menu = false;
		$('#sidebar').css('left', -adjustOffset);
		function openMenu() {
			if (!menu) {
				$('#main').animate({
					'left': adjustOffset
				}, 500);
				$('#sidebar').animate({
					'left': 0
				}, 500);
				menu = true;
			} else {
				$('#main').animate({
					'left': 0
				}, 500);
				$('#sidebar').animate({
					'left': -adjustOffset
				}, 500);
				menu = false;
			}
		}
		$('.menu').on('click', openMenu);



		// ** swipe left on node-dad ** //
		$( 'body' ).on( "swipeleft", ".node-dad", function() {
			if ($(this).index() > 0) {
				$(this).find('.inner-nodes').animate({
					left:'-300px'
				}, 500);
				$(this).find('.synonym').animate({
					opacity:1
				}, 1000);
			}
			console.log(this);
			modifyChain(this);
		});
		
		// ** modify chain ** //
		function modifyChain(elem) {
			var parent = $(elem);
			var synonym = parent.find('.synonym')[0].innerText;

			var nodes = $('.node-dad:gt('+parent.index()+')');

			var waitTime = nodes.length * 300;

			for (var i = 0; i < nodes.length - 1; i++) {
				var n = i;
				$(nodes[i]).fadeOut((nodes.length - i) * 300, function(n) {
					this.remove();
				});
			}

			setTimeout(function() {
				$.ajax({
				url: '/search/modified',
				type: 'get',
				dataType:'json',
				data: {
					start: synonym,
					end: "#{data[0].end}",
					synonymlevel: 10,
					nodelimit: 10 - parent.index()		
				},
				success: function(data) {
					
					if (data.errormsg) {
						alert(data.errormsg + "\n\nClick okay to refresh the original results.");
						//document.location.reload(true);
					} else {
						parent.remove();
						for (var i = 0; i < data.path.length - 1; i ++) {
							var newnodedad = $('<div>')
								.addClass('node-dad');
							var newtoggle = $('<span>')
								.addClass('toggle')
								.css({width:'24px'});
							var newdots = $('<a>')
								.addClass('dots')
								.text(' •  •');
							newtoggle.append(newdots);
							
							var inners = $('<div>')
								.addClass('inner-nodes');

							var newnode = $('<div>')
								.addClass('node')
								.text(data.path[i].node);

							newnodedad.append(newtoggle);
							inners.append(newnode);
	
							var newsynnode = $('<div>')
								.addClass('synonym')
								.text(data.path[i].synonyms[1]);
							inners.append(newsynnode);
							newnodedad.append(inners);
							newnodedad.insertBefore('.node-dad:last-child()');

							newnodedad.fadeIn(i * 1200);
						}
					}
				}
			});
			}, waitTime);
		}

		if ("#{errmsg}") alert("#{errmsg}");

		});