extends layout
block content

	div#sidebar
		ul
			li
				a(href="/")="new search"
			li
				a(href="#")="about synopath"
			li
				a(href="#")="how it works"
			li
				a(href="#")="feedback"


	div#main
		header
			a.menu
				svg(width="22" height="22" viewBox="0 0 20 20")
					path(fill="none" stroke="#C7C8CA" stroke-width="2" stroke-linecap="round" d="M17.2 7.6H1.1M17.2 1.2H1.1M17.2 14H1.1")
			div.paths.fadein
				a.path(id="p0")
			a.plus.fadein
				svg(width="20" height="20" viewBox="0 0 20 20")
					g(fill="none")
					path(d="M9.6 1v17.1M18.1 9.6H1" stroke="#C7C8CA" stroke-width="2" stroke-linecap="round")
	
		div#adjust
			div="path adjustments"
			hr
			form(method="post", action="/search")
				input(type="hidden",name="start",value=start)
				input(type="hidden",name="end", value=end)

				label(style="color:black")="path length: "
					span="select how many words to use in a path."
				input(type="range",min=1,max=15,value=nodelimit,id="nodelimit",name="nodelimit")
				div.numbers.nodelim
					- var n = 1
					while n < 16
						span.num= n++

				hr
				label(style="color:black")="path depth: "
					span="select the maximum number of synonyms to search for each word in a path."
				input(type="range",min=1,max=15,value=synonymlevel,id="synonymlevel",name="synonymlevel")
				div.numbers.synlev
					- var n = 1
					while n < 16
						span.num= n++

				hr
				input(type="submit", value="apply adjustment")
		div#nodes
			each node, index in Object.keys(path)
				div.node-dad

					if index == 0
						a.toggle.adjust-button
							svg(width="20" height="20" viewBox="0 0 20 20")
								path(fill="none" stroke="#C7C8CA" stroke-width="2" stroke-linecap="round" d="M18.1 9.6H2")
								path(fill="#fff" d="M7.6 9.6c0 1.3 1.1 2.4 2.4 2.4 1.3 0 2.4-1.1 2.4-2.4 0-1.3-1.1-2.4-2.4-2.4-1.3 0-2.4 1.1-2.4 2.4")
								circle(fill="none" stroke="#C7C8CA" stroke-width="1.15" cx="10" cy="9.6" r="2.4")

					else if index < Object.keys(path).length - 1
						span.toggle
							a.dots=" •  •"
					else 
						a.toggle

					div.node=path[node].node
						div.node-btn.noded
					
					if index != 0
						if path[index - 1].synonyms
							each synonym in path[index - 1].synonyms
								if synonym != path[index].node
									div.synonym=synonym
										div.node-btn

									
	// javascript // 
	script(type='text/javascript').

		document.ontouchmove = function(e) {e.preventDefault()};
		$('#nodes').on('touchmove', function(event){
			event.stopPropagation();
		});
		$('#adjust').on('touchmove', function(event){
			event.stopPropagation();
		});

		$('#nodes').animate({
			"margin-left":"32px"
		}, 900, function() {
			$('.toggle').animate({width:"24px"}, 900, function() {
				var nodes = $('.node-dad');
				for (var i = 0; i < nodes.length; i++) {
					var showNode = function(num) {
						setTimeout( function() {
							$(nodes[num]).fadeIn();
						}, num*400);
					}(i);
				}
			});
		});
		$('.fadein').animate({
			opacity: 1
		}, 900);

		var undrag = function(elem) {
			elem.removeClass('selected');
			elem.removeClass('draggable');
			elem.draggable('destroy');
			elem.css({
					top:0,
					left:0
				});
			elem.find('.dots').css({transform:"rotate(0deg)"});
			elem.find('.node-btn').fadeOut();
		}

		var prevSelected;
		$('body').on('click', '.dots', function() {
			var parent = $(this).parent().parent();
			if (parent.hasClass('selected')) {
				undrag(parent);
				prevSelected = undefined;
			} else {
				if (prevSelected) {
					undrag(prevSelected);
				}
				$(this).css({transform:"rotate(-90deg)"});
				parent.addClass('selected');
				parent.addClass('draggable');
				parent.find('.node-btn').fadeIn(500);
				prevSelected = parent;
				var c = parent.children();
				var w = 0;
				for (var i = 0; i < c.length; i++) {
					w += $(c[i]).width();
					w += 24; // approx padding
				}
				var leftContain = -w + window.innerWidth;
				if (leftContain > 0 ) {
					leftContain = 32;
				}
				parent.css({width:w});
				parent.draggable({
					scroll:false,
					axis: 'x',
					containment: [leftContain, 0, 32, 0]
				});
			}
		});

		$('.draggable' ).draggable({
			scroll:false,
			axis: "x",
			containment:[-1000,0,32,0],
		});

		
		var adjust = false;
		var adjustOffset = 260;
		$('#adjust').css('left', -adjustOffset);
		function adjustMenu() {
			if (!adjust) {
				$('#nodes').animate({
					'left': adjustOffset
				}, 500);
				$('#adjust').animate({
					'left': 0
				}, 500);
				adjust = true;
			} else {
				$('#nodes').animate({
					'left': 0
				}, 500);
				$('#adjust').animate({
					'left': -adjustOffset
				}, 500);
				adjust = false;
			}
		}
		$('.adjust-button').on('click', adjustMenu);

		$('input[type="range"]').on('change', function() {
			$('#adjust input[type="submit"]').css({
				'color':'#6a75ff'
			});
			var e = $(this);
			e.next().children().css({color:"#c6c8ca"})
			e.next().children(':nth-child('+e[0].value+')').css({color:"black"});
		});
		$('.nodelim').children(':nth-child('+#{nodelimit}+')').css({color:"black"});
		$('.synlev').children(':nth-child('+#{synonymlevel}+')').css({color:"black"});

		// ** sidebar menu ** //
		var menu = false;
		var sidebarOffset = $('#sidebar').width();
		$('#sidebar').css('left', -sidebarOffset);
		function openMenu() {
			if (!menu) {
				$('#main').animate({
					'left': sidebarOffset
				}, 500);
				$('#sidebar').animate({
					'left': 0
				}, 500);
				menu = true;
			} else {
				$('#main').animate({
					'left': 0
				}, 500);
				$('#sidebar').animate({
					'left': -sidebarOffset
				}, 500);
				menu = false;
			}
		}
		$('.menu').on('click', openMenu);

		$('input[value="Enter"]').on('click', function(e) {
			$('.adjust').slideUp();
			for (var i = 1; i < nodes.length - 1; i++) 
				$(nodes[i]).fadeOut();
			var ldr = $('<img>').attr({'class':'ldr', 'src':'/images/ldr.gif'});
			$(nodes[0]).after(ldr);
		});

		function modifyChain() {
			$('.noded').removeClass('noded');
			$(this).addClass('noded'); 

			var parent = $(this).parent();
			var synonym = parent[0].innerText;
			var nodeparent = parent.parent();
			var node = nodeparent.find('.node');
			var word = node[0].innerText;

			parent.siblings().animate({
				opacity: 0
			}, 500);
			parent.css({color:'black'});
			parent.find('.node-btn').fadeOut();
			$(nodeparent[0]).css({'border-color':'transparent'});
			$(nodeparent[0]).animate({
				left: -parent.offset().left + 72 + 'px'
			}, 1000);

			var nodes = $('.node-dad:gt('+nodeparent.index()+')');

			for (var i = 0; i < nodes.length - 1; i++) {
				var n = i;
				$(nodes[i]).fadeOut((nodes.length - i) * 300, function(n) {
					this.remove();
				});
			}

			$.ajax({
				url: '/search/modified',
				type: 'get',
				dataType:'json',
				data: {
					start: synonym,
					end: "#{end}",
					synonymlevel: #{synonymlevel},
					nodelimit: #{nodelimit} - nodeparent.index()		
				},
				success: function(data) {
					
					if (data.errormsg) {
						alert(data.errormsg + "\n\nClick okay to refresh the original results.");
						document.location.reload(true);
					}

					else {
						undrag($('.selected'));
						nodeparent.remove();
						prevSelected = null;
						for (var i = 0; i < data.path.length - 1; i ++) {
							var newnodedad = $('<div>')
								.addClass('node-dad');
							var newtoggle = $('<span>')
								.addClass('toggle')
								.css({width:'24px'});
							var newdots = $('<a>')
								.addClass('dots')
								.text(' •  •');
							newtoggle.append(newdots);
							
							var newnode = $('<div>')
								.addClass('node')
								.text(data.path[i].node);
							var newnodebtn = $('<div>')
								.addClass('node-btn');

							newnode.append(newnodebtn);
							newnodedad.append(newtoggle);
							newnodedad.append(newnode);
							
							for (var h = 0; h < data.path[i].synonyms.length; h++) {
								var newsynnode = $('<div>')
									.addClass('synonym')
									.text(data.path[i].synonyms[h]);
								var synnodebtn = $('<div>')
									.addClass('node-btn');
								newsynnode.append(synnodebtn);
								newnodedad.append(newsynnode);
							}
							newnodedad.insertBefore('.node-dad:last-child()');

							newnodedad.fadeIn(i * 800 + 800);
						}
					}
				}
			});

		}
		$('body').on('click', '.node-btn', modifyChain);