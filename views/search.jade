extends layout
block content

	div#sidebar
		ul
			li
				a(href="/")="new search"
			li
				a(href="#")="about synopath"
			li
				a(href="#")="how it works"
			li
				a(href="#")="feedback"


	div#main
		header
			div.menu
				img(src="/images/menu.svg")
			div.paths.fadein
				div.path(id="p0")
			div.plus.fadein
				img(src="/images/plus.svg")
	
		div#adjust
			div="path adjustments"
			hr
			form(method="post", action="/search")
				input(type="hidden",name="start",value=start)
				input(type="hidden",name="end", value=end)

				label(style="color:black")="path length: "
					span="select how many words to use in a path."
				input(type="range",min=1,max=15,value=nodelimit,id="nodelimit",name="nodelimit")
				div.numbers.nodelim
					- var n = 1
					while n < 16
						span.num= n++

				hr
				label(style="color:black")="path depth: "
					span="select the maximum number of synonyms to search for each word in a path."
				input(type="range",min=1,max=15,value=synonymlevel,id="synonymlevel",name="synonymlevel")
				div.numbers.synlev
					- var n = 1
					while n < 16
						span.num= n++

				hr
				input(type="submit", value="apply adjustment")
		div#nodes.nonbounce
			each node, index in Object.keys(path)
				div.node-dad

					if index == 0
						span.toggle.adjust-button
							img(src="/images/toggle.svg")
					else if index < Object.keys(path).length - 1
						span.toggle
							span.dots=" •  •"
					else 
						span.toggle

					div.node=path[node].node
						div.node-btn.noded
					
					if index != 0
						if path[index - 1].synonyms
							each synonym in path[index - 1].synonyms
								if synonym != path[index].node
									div.synonym=synonym
										div.node-btn

	script(type="text/javascript" src="/javascripts/nonbounce.js")									
	// javascript // 
	script(type='text/javascript').

		$.nonbounce(); 

		$('#nodes').animate({
			"margin-left":"32px"
		}, 900, function() {
			$('.toggle').animate({width:"24px"}, 900, function() {
				var nodes = $('.node-dad');
				for (var i = 0; i < nodes.length; i++) {
					var showNode = function(num) {
						setTimeout( function() {
							$(nodes[num]).fadeIn();
						}, num*800);
					}(i);
				}
			});
		});
		$('.fadein').animate({
			opacity: 1
		}, 900);

		var prevSelected;
		$('.dots').on('click', function() {
			var parent = $(this).parent().parent();
			if (parent.hasClass('selected')) {
				parent.removeClass('selected');
				parent.removeClass('draggable');
				parent.draggable('destroy');
				parent.find('.dots').css({transform:"rotate(0deg)"});
				parent.find('.node-btn').fadeOut();
				prevSelected = undefined;
			} else {
				if (prevSelected) {
					prevSelected.removeClass('selected');
					prevSelected.removeClass('draggable');
					prevSelected.draggable('destroy');
					prevSelected.find('.node-btn').fadeOut();
					prevSelected.css({
						top:0,
						left:0
					});
					prevSelected.find('.dots').css({transform:"rotate(0deg)"});
				}
				$(this).css({transform:"rotate(-90deg)"});
				parent.addClass('selected');
				parent.addClass('draggable');
				parent.find('.node-btn').fadeIn(500);
				prevSelected = parent;
				var c = parent.children();
				var w = 0;
				for (var i = 0; i < c.length; i++) {
					w += $(c[i]).width();
					w += 24; // approx padding
				}
				var leftContain = -w + window.innerWidth;
				if (leftContain > 0 ) {
					leftContain = 32;
				}
				parent.css({width:w});
				parent.draggable({
					scroll:false,
					axis: 'x',
					containment: [leftContain, 0, 32, 0]
				});
			}
		});

		$('.draggable' ).draggable({
			scroll:false,
			axis: "x",
			containment:[-1000,0,32,0],
		});

		
		var adjust = false;
		var adjustOffset = 260;
		$('#adjust').css('left', -adjustOffset);
		function adjustMenu() {
			if (!adjust) {
				$('#nodes').animate({
					'left': adjustOffset
				}, 500);
				$('#adjust').animate({
					'left': 0
				}, 500);
				adjust = true;
			} else {
				$('#nodes').animate({
					'left': 0
				}, 500);
				$('#adjust').animate({
					'left': -adjustOffset
				}, 500);
				adjust = false;
			}
		}
		$('.adjust-button').on('click', adjustMenu);

		$('input[type="range"]').on('change', function() {
			$('#adjust input[type="submit"]').css({
				'color':'#6a75ff'
			});
			var e = $(this);
			e.next().children().css({color:"#c6c8ca"})
			e.next().children(':nth-child('+e[0].value+')').css({color:"black"});
		});
		$('.nodelim').children(':nth-child('+#{nodelimit}+')').css({color:"black"});
		$('.synlev').children(':nth-child('+#{synonymlevel}+')').css({color:"black"});

		
		var menu = false;
		var sidebarOffset = $('#sidebar').width();
		$('#sidebar').css('left', -sidebarOffset);
		function openMenu() {
			if (!menu) {
				$('#main').animate({
					'left': sidebarOffset
				}, 500);
				$('#sidebar').animate({
					'left': 0
				}, 500);
				menu = true;
			} else {
				$('#main').animate({
					'left': 0
				}, 500);
				$('#sidebar').animate({
					'left': -sidebarOffset
				}, 500);
				menu = false;
			}
		}
		$('.menu').on('click', openMenu);

		$('input[value="Enter"]').on('click', function(e) {
			$('.adjust').slideUp();
			for (var i = 1; i < nodes.length - 1; i++) 
				$(nodes[i]).fadeOut();
			var ldr = $('<img>').attr({'class':'ldr', 'src':'/images/ldr.gif'});
			$(nodes[0]).after(ldr);
		});

		function makeNewChain() {
			
			$('.noded').removeClass('noded');
			$(this).addClass('noded'); 

			var parent = $(this).parent();
			var synonym = parent[0].innerText;
			var nodeparent = parent.parent();
			var node = nodeparent.find('.node');
			var word = node[0].innerText;
			
			parent.siblings().animate({
				opacity: 0
			}, 500);

			var data = !{JSON.stringify(path)};
			var oldpath = data.slice(0, parent.index());
			var container = $('<div>')
				.attr('id', 'modified-search');
			var form = $('<form>')
				.attr({
					'method':'post',
					'action':'/search/modified',
				});
			var start = $('<input>')
				.attr({
					'name':'start',
					'type':'hidden',
					'value':synonym
				});
			var end = $('<input>')
				.attr({
					'name':'end',
					'type':'hidden',
					'value':"#{end}"
				});
			var nodelimit = $('<input>')
				.attr({
					'name':'nodelimit',
					'type':'hidden',
					'value':10
				});
			var synonymlevel = $('<input>')
				.attr({
					'name':'synonymlevel',
					'type':'hidden',
					'value':10
				});
			var path = $('<input>')
				.attr({
					'name':'path',
					'type':'hidden',
					'value':JSON.stringify(oldpath)
					});
			var submit = $('<input>')
				.attr({
					'type':'submit',
					'id':'mod',
					'value':"Click to replace " + word + " with " + synonym
				});
			$(submit).on('click', function() {
				$('#modified-search').remove();
				for (var i = parent; i < nodes.length - 1; i++) 
					$(nodes[i]).fadeOut();
				var ldr = $('<img>').attr({'class':'ldr', 'src':'/images/ldr.gif'});
				$(nodes[parent]).after(ldr);
			});
			var cancel = $('<button>')
				.attr('id', 'cancel')
				.html('Cancel');
			$(cancel).on('click', function() {
				$('#modified-search').remove();
				parent.siblings().animate({
					opacity: 1
				}, 500);
			});
			form.append(start).append(end).append(nodelimit).append(synonymlevel).append(path).append(submit);
			container.append(form);
			container.append(cancel);
			container.css({opacity:0});
			$('body').append(container);
			container.animate({opacity:1}, 500);
		}
		$('.node-btn').on('click', makeNewChain);